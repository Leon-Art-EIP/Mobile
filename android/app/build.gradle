plugins {
  id 'com.android.application'
  id 'com.google.gms.google-services'
}

apply plugin: "com.android.application"
apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")

import com.android.build.OutputFile
import org.apache.tools.ant.taskdefs.condition.Os

project.ext.react = [
  enableHermes: true,  // clean and rebuild if changing
]

def enableSeparateBuildPerCPUArchitecture = false

def enableProguardInReleaseBuilds = false

def jscFlavor = 'org.webkit:android-jsc:+'

def enableHermes = project.ext.react.get("enableHermes", false);

def reactNativeArchitectures() {
  def value = project.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}


android {
  lintOptions {
        disable 'RestrictedApi'
    }
  ndkVersion rootProject.ext.ndkVersion

  compileSdkVersion rootProject.ext.compileSdkVersion

  defaultConfig {
    applicationId "com.leonart.mobile"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 1
    versionName "1.0"
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

    configurations.all {
      resolutionStrategy {
        force("androidx.emoji2:emoji2-views-helper:1.3.0")
        force("androidx.emoji2:emoji2:1.3.0")
      }
    }

    if (isNewArchitectureEnabled()) {
      externalNativeBuild {
        cmake {
          arguments "-DPROJECT_BUILD_DIR=$buildDir",
            "-DREACT_ANDROID_DIR=$rootDir/../node_modules/react-native/ReactAndroid",
            "-DREACT_ANDROID_BUILD_DIR=$rootDir/../node_modules/react-native/ReactAndroid/build",
            "-DNODE_MODULES_DIR=$rootDir/../node_modules",
            "-DANDROID_STL=c++_shared"
        }
      }
      if (!enableSeparateBuildPerCPUArchitecture) {
        ndk {
          abiFilters (*reactNativeArchitectures())
        }
      }
    }
  }

  if (isNewArchitectureEnabled()) {
    externalNativeBuild {
      cmake {
        path "$projectDir/src/main/jni/CMakeLists.txt"
      }
    }
    def reactAndroidProjectDir = project(':ReactAndroid').projectDir
    def packageReactNdkDebugLibs = tasks.register("packageReactNdkDebugLibs", Copy) {
      dependsOn(":ReactAndroid:packageReactNdkDebugLibsForBuck")
      from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
      into("$buildDir/react-ndk/exported")
    }
    def packageReactNdkReleaseLibs = tasks.register("packageReactNdkReleaseLibs", Copy) {
      dependsOn(":ReactAndroid:packageReactNdkReleaseLibsForBuck")
      from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
      into("$buildDir/react-ndk/exported")
    }
    afterEvaluate {
      preDebugBuild.dependsOn(packageReactNdkDebugLibs)
      preReleaseBuild.dependsOn(packageReactNdkReleaseLibs)

      configureCMakeRelWithDebInfo.dependsOn(preReleaseBuild)
      configureCMakeDebug.dependsOn(preDebugBuild)
      reactNativeArchitectures().each { architecture ->
        tasks.findByName("configureCMakeDebug[${architecture}]")?.configure {
          dependsOn("preDebugBuild")
        }
        tasks.findByName("configureCMakeRelWithDebInfo[${architecture}]")?.configure {
          dependsOn("preReleaseBuild")
        }
      }
    }
  }

  splits {
    abi {
      reset()
      enable enableSeparateBuildPerCPUArchitecture
      universalApk false
      include (*reactNativeArchitectures())
    }
  }
  signingConfigs {
    debug {
      storeFile file("${System.getenv('HOME')}/.android/debug.keystore")
      storePassword "android"
      keyAlias "androiddebugkey"
      keyPassword "android"
    }
    release {
      storeFile file('release.keystore')
      storePassword 'marine'
      keyAlias 'Marine'
      keyPassword 'marine'
    }
  }
  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }
    release {
      signingConfig signingConfigs.release
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
    }
  }
  namespace 'com.leonart.mobile'

  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
      def abi = output.getFilter(OutputFile.ABI)
      if (abi != null) {
        output.versionCodeOverride =
            defaultConfig.versionCode * 1000 + versionCodes.get(abi)
      }

    }
  }
}

dependencies {
  // Firebase BoM
  implementation platform('com.google.firebase:firebase-bom:33.1.0')

  // Stripe Android SDK
  implementation 'com.stripe:stripe-android:20.36.0'

  implementation fileTree(dir: "libs", include: ["*.jar"])

  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"  // From node_modules

  implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

  debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
    exclude group:'com.facebook.fbjni'
  }

  debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
    exclude group:'com.facebook.flipper'
    exclude group:'com.squareup.okhttp3', module:'okhttp'
  }

  debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
    exclude group:'com.facebook.flipper'
  }

  if (enableHermes) {
    implementation("com.facebook.react:hermes-engine:+") {
      exclude group:'com.facebook.fbjni'
    }
  } else {
    implementation jscFlavor
  }
}

if (isNewArchitectureEnabled()) {
  configurations.all {
    resolutionStrategy.dependencySubstitution {
      substitute(module("com.facebook.react:react-native"))
          .using(project(":ReactAndroid"))
          .because("On New Architecture we're building React Native from source")
      substitute(module("com.facebook.react:hermes-engine"))
          .using(project(":ReactAndroid:hermes-engine"))
          .because("On New Architecture we're building Hermes from source")
    }
  }
}

task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.implementation
  into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

def isNewArchitectureEnabled() {
  return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}

apply plugin: 'com.google.gms.google-services'
